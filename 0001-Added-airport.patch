From d470ca10c6137ed73c5e6b83d12bd8dcae7c5245 Mon Sep 17 00:00:00 2001
From: Sam Heather <sam@heather.sh>
Date: Thu, 13 Feb 2014 12:12:45 +0000
Subject: [PATCH] Added airport

---
 .../seprini/controllers/AircraftController.java    |    8 +++
 ini-atc/src/seprini/controllers/Leaderboard.java   |    2 +-
 .../controllers/components/WaypointComponent.java  |    4 +-
 ini-atc/src/seprini/models/Aircraft.java           |   18 +++++-
 ini-atc/src/seprini/models/Airport.java            |   66 ++++++++++++++++++++
 5 files changed, 94 insertions(+), 4 deletions(-)
 create mode 100644 ini-atc/src/seprini/models/Airport.java

diff --git a/ini-atc/src/seprini/controllers/AircraftController.java b/ini-atc/src/seprini/controllers/AircraftController.java
index 909228b..941d3e5 100644
--- a/ini-atc/src/seprini/controllers/AircraftController.java
+++ b/ini-atc/src/seprini/controllers/AircraftController.java
@@ -11,6 +11,7 @@ import seprini.data.Debug;
 import seprini.data.GameDifficulty;
 import seprini.data.State;
 import seprini.models.Aircraft;
+import seprini.models.Airport;
 import seprini.models.Airspace;
 import seprini.models.Cloud;
 import seprini.models.Map;
@@ -29,6 +30,8 @@ import com.badlogic.gdx.scenes.scene2d.utils.ClickListener;
 
 public final class AircraftController extends InputListener implements
 		Controller {
+	
+	Airport airport = new Airport();
 
 	Random rand = new Random();
 
@@ -199,6 +202,11 @@ public final class AircraftController extends InputListener implements
 			// Update aircraft.
 			(planeI = aircraftList.get(i)).act();
 			planeI.isBreaching(false);
+			if(planeI.getCoords().dst(airport.getCoords()) < planeI
+			.getRadius() + airport.getRadius()) {
+				airport.planeCollision(planeI);
+			}
+			
 
 			// Collision Detection + Separation breach detection.
 			for (int j = 0; j < aircraftList.size(); j++) {
diff --git a/ini-atc/src/seprini/controllers/Leaderboard.java b/ini-atc/src/seprini/controllers/Leaderboard.java
index cc3fd58..2e6cf73 100755
--- a/ini-atc/src/seprini/controllers/Leaderboard.java
+++ b/ini-atc/src/seprini/controllers/Leaderboard.java
@@ -19,7 +19,7 @@ public class Leaderboard /* implements Drawable */{
 	 * Array containing the LeaderboardEntries
 	 */
 	public static LeaderboardEntry[] leaderboardEntries = new LeaderboardEntry[5];
-	public static String[] originalNames = {"Larry", "Bill", "Tim", "Richard", "Fiona"};
+	public static String[] originalNames = {"Larry", "Sergey", "Tim", "Richard", "Fiona"};
 	/**
 	 * Path to the file in which leaderboardScores are stored.
 	 */
diff --git a/ini-atc/src/seprini/controllers/components/WaypointComponent.java b/ini-atc/src/seprini/controllers/components/WaypointComponent.java
index adfdc79..e8ea1d7 100644
--- a/ini-atc/src/seprini/controllers/components/WaypointComponent.java
+++ b/ini-atc/src/seprini/controllers/components/WaypointComponent.java
@@ -38,14 +38,14 @@ public class WaypointComponent {
 		createEntrypoint(0, 720);
 		createEntrypoint(1080, 360);
 		createEntrypoint(540, 0);
-		createEntrypoint(400, 345);
+		//createEntrypoint(400, 345);
 
 		// add exit waypoints to exitList
 		createExitpoint(1080, 720);
 		createExitpoint(1080, 0);
 		createExitpoint(0, 420);
 		createExitpoint(540, 720);
-		createExitpoint(400, 345);
+		//createExitpoint(400, 345);
 
 		// add some waypoints
 		createWaypoint(300, 200, true);
diff --git a/ini-atc/src/seprini/models/Aircraft.java b/ini-atc/src/seprini/models/Aircraft.java
index 148ac92..3f408e9 100644
--- a/ini-atc/src/seprini/models/Aircraft.java
+++ b/ini-atc/src/seprini/models/Aircraft.java
@@ -294,6 +294,14 @@ public final class Aircraft extends Entity {
 		
 		return angle;
 	}
+	private Vector2 overriddenWaypoint = null;
+	void overrideWaypoint(Vector2 v){
+		overriddenWaypoint = v;
+	}
+	
+	void unoverrideWaypoint() {
+		overriddenWaypoint = null;
+	}
 
 	/**
 	 * Calculates the vector to the next waypoint
@@ -310,7 +318,7 @@ public final class Aircraft extends Entity {
 		nextWaypoint.y = (float) (Math
 				.round(waypoints.get(0).getCoords().y * 100.0) / 100.0);
 
-		return nextWaypoint;
+		return overriddenWaypoint != null ? overriddenWaypoint : nextWaypoint;
 	}
 
 	/**
@@ -543,6 +551,14 @@ public final class Aircraft extends Entity {
 		}
 		return false;
 	}
+	
+	/**
+	 * Setter for canControl
+	 * @param b
+	 */
+	public void setCanControl(boolean b) {
+		this.canControl = b;
+	}
 
 	@Override
 	public String toString() {
diff --git a/ini-atc/src/seprini/models/Airport.java b/ini-atc/src/seprini/models/Airport.java
new file mode 100644
index 0000000..af06e24
--- /dev/null
+++ b/ini-atc/src/seprini/models/Airport.java
@@ -0,0 +1,66 @@
+package seprini.models;
+
+import java.util.ArrayList;
+
+import com.badlogic.gdx.math.Vector2;
+
+public class Airport {
+	
+	private Vector2 pos = new Vector2(400, 345);
+	
+	public Airport() {
+		
+	}
+	
+	public boolean landPlane(Aircraft a) {
+		if (!canLandPlane()) {
+			return false;
+		}
+		stored.add(a);
+		a.setCanControl(false);
+		a.overrideWaypoint(pos);
+		return true;
+	}
+	
+	public boolean canLandPlane() {
+		if (this.stored.size() < 3) {
+			return true;
+		}
+		return false;
+	}
+	
+	public boolean canLaunchPlane() {
+		if (this.stored.size() > 0) {
+			return true;
+		}
+		return false;
+	}
+	
+	public int getPlaneCount() {
+		return this.stored.size();
+	}
+	
+
+	
+	private float radius = 50;
+
+	public float getRadius() {
+		return radius;
+		// TODO Auto-generated method stub
+	}
+
+	public Vector2 getCoords() {
+		// TODO Auto-generated method stub
+		return pos;
+	}
+	
+	private ArrayList<Aircraft> stored = new ArrayList<Aircraft>();
+
+	public void planeCollision(Aircraft planeI) {
+		if (stored.contains(planeI)) {
+			planeI.remove();
+			planeI.unoverrideWaypoint();
+		}
+	}
+
+}
-- 
1.7.9.5

